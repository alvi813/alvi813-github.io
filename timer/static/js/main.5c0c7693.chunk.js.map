{"version":3,"sources":["components/timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","startStopTimer","state","timerId","clearInterval","setState","results","time","millisec","timerStep","setInterval","msToTime","val","seconds","minutes","this","className","onClick","map","result","key","Component","App","toggleTimer","showTimer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qRAqEeA,G,wDAhEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAmBVC,eAAiB,WACb,GAAI,EAAKC,MAAMC,QACXC,cAAc,EAAKF,MAAMC,SACzB,EAAKE,SAAS,CACVF,QAAS,KACTG,QAAQ,GAAD,mBAAM,EAAKJ,MAAMI,SAAjB,CAA0B,EAAKJ,MAAMK,aAE7C,CACH,IAAIC,EAAW,EAAKC,UAEdN,EAAUO,aAAY,WACxB,EAAKL,SAAS,CACVE,KAAM,EAAKI,SAASH,KAExBA,GAAY,EAAKC,YAClB,EAAKA,WACR,EAAKJ,SAAS,CACVF,cAnCR,EAAKD,MAAQ,CACTK,KAAM,EAAKI,SAAS,GACpBR,QAAS,KACTG,QAAS,IAEb,EAAKG,UAAY,GAPF,E,qDASVG,GACL,IAEMJ,EAAWI,EAFE,IAIbC,GADND,GAAOA,EAAMJ,GAHM,KACF,GAKXM,GADNF,GAAOA,EAAMC,GAJI,OAOjB,OADaD,EAAME,GANF,GAOJ,IAAMA,EAAU,IAAMD,EAAU,IAAML,I,+BAwB7C,IAAD,EAC8BO,KAAKb,MAAhCK,EADH,EACGA,KAAMJ,EADT,EACSA,QAASG,EADlB,EACkBA,QAEvB,OACI,6BACI,yBAAKU,UAAU,QAAQT,GACvB,4BAAQS,UAAU,+CAA+CC,QAASF,KAAKd,gBAC1EE,EAAS,OAAS,QADvB,UAGA,yBAAKa,UAAU,WACX,uBAAGA,UAAU,iBAAb,iBACA,yBAAKA,UAAU,gBACVV,EAAQY,KAAI,SAAAC,GAAM,OACf,uBAAGH,UAAU,cAAcI,IAAKD,GAASA,a,GAxDjDE,cC6BLC,G,wDAxBb,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IAMRuB,YAAc,WACZ,EAAKlB,SAAS,CAACmB,WAAY,EAAKtB,MAAMsB,aANtC,EAAKtB,MAAQ,CACXsB,WAAW,GAHI,E,qDAWT,IACDA,EAAaT,KAAKb,MAAlBsB,UACP,OACI,yBAAKR,UAAU,WACb,4BAAQA,UAAU,8CAA8CC,QAASF,KAAKQ,aAC3EC,EAAY,OAAS,OADxB,UAGCA,GAAa,kBAAC,EAAD,W,GAnBNH,cCIEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5c0c7693.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./timer.css\"\r\n\r\n\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            time: this.msToTime(0),\r\n            timerId: null,\r\n            results: []\r\n        };\r\n        this.timerStep = 10;\r\n    }\r\n    msToTime(val) {\r\n        const const_1000 = 1000;\r\n        const const_60 = 60;\r\n        const millisec = val % const_1000;\r\n        val = (val - millisec) / const_1000;\r\n        const seconds = val % const_60;\r\n        val = (val - seconds) / const_60;\r\n        const minutes = val % const_60;\r\n        const hrs = (val - minutes) / const_60;\r\n        return hrs + ':' + minutes + ':' + seconds + '.' + millisec;\r\n    }\r\n    startStopTimer = () => {\r\n        if (this.state.timerId) {\r\n            clearInterval(this.state.timerId);\r\n            this.setState({\r\n                timerId: null,\r\n                results: [...this.state.results, this.state.time]\r\n            });\r\n        } else {\r\n            let millisec = this.timerStep;\r\n\r\n            const timerId = setInterval(() => {\r\n                this.setState({\r\n                    time: this.msToTime(millisec)\r\n                });\r\n                millisec += this.timerStep;\r\n            }, this.timerStep);\r\n            this.setState({\r\n                timerId\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { time, timerId, results } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"time\">{time}</div>\r\n                <button className=\"btn btn-outline-success start-stop-timer-btn\" onClick={this.startStopTimer}>\r\n                    {timerId? 'Stop' : 'Start'} timer\r\n                </button>\r\n                <div className=\"results\">\r\n                    <p className=\"results-title\">Results list:</p>\r\n                    <div className=\"results-list\">\r\n                        {results.map(result => (\r\n                            <p className=\"each-result\" key={result}>{result}</p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;","import React, { Component } from \"react\";\nimport Timer from \"./components/timer\";\n\nimport './App.css'\n\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showTimer: true\n    }\n  }\n\n  toggleTimer = () => {\n    this.setState({showTimer: !this.state.showTimer});\n  }\n\n  render() {\n    const {showTimer} = this.state;\n    return (\n        <div className=\"mainDiv\">\n          <button className=\"btn btn-outline-success hide-show-timer-btn\" onClick={this.toggleTimer}>\n            {showTimer ? 'Hide' : 'Show'} timer\n          </button>\n          {showTimer && <Timer/>}\n        </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}