{"version":3,"sources":["components/button.js","components/calculator.js","components/calculatorTitle.js","components/outputScreenRow.js","components/outputScreen.js","index.js"],"names":["Button","props","type","value","label","onClick","handleClick","Calculator","event","target","state","request","num","includes","eval","toPrecision","substr","length","replace","undefined","setState","calculationResult","str","isNaN","slice","className","this","Component","CalculatorTitle","OutputScreenRow","readOnly","OutputScreen","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b917d5da.chunk.js","sourcesContent":["import React from 'react';\n\nconst Button = (props) => {\n  return (\n    <input\n      type=\"button\"\n      value={props.label}\n      onClick = {props.handleClick}\n    />\n  );\n}\n\nexport default Button;\n","import React, {Component} from 'react';\nimport CalculatorTitle from './calculatorTitle.js';\nimport OutputScreen from './outputScreen.js';\nimport Button from './button.js';\n\nimport '../index.css'\n\nclass Calculator extends Component {\n\n    constructor(props) {\n        super(props);\n        // set our default state\n        this.state = {\n            request: 0,\n            calculationResult: false\n        }\n    }\n\n\n    render() {\n        return (\n            <div className=\"mainAll\">\n                <CalculatorTitle value=\"Classical Calculator\"/>\n                <div className=\"mainCalc\">\n                    <OutputScreen request={this.state.request}/>\n                    <div className=\"button-row\">\n                        <Button label={'C'} handleClick={this.handleClick}/>\n                        <Button label={'CE'} handleClick={this.handleClick}/>\n                        <Button label={'/'} handleClick={this.handleClick}/>\n                        <Button label={'*'} handleClick={this.handleClick}/>\n                    </div>\n                    <div className=\"button-row\">\n                        <Button label={'7'} handleClick={this.handleClick}/>\n                        <Button label={'8'} handleClick={this.handleClick}/>\n                        <Button label={'9'} handleClick={this.handleClick}/>\n                        <Button label={'-'} handleClick={this.handleClick}/>\n                    </div>\n                    <div className=\"button-row\">\n                        <Button label={'4'} handleClick={this.handleClick}/>\n                        <Button label={'5'} handleClick={this.handleClick}/>\n                        <Button label={'6'} handleClick={this.handleClick}/>\n                        <Button label={'+'} handleClick={this.handleClick}/>\n                    </div>\n                    <div className=\"button-row\">\n                        <Button label={'1'} handleClick={this.handleClick}/>\n                        <Button label={'2'} handleClick={this.handleClick}/>\n                        <Button label={'3'} handleClick={this.handleClick}/>\n                        <Button label={'.'} handleClick={this.handleClick}/>\n                    </div>\n                    <div className=\"button-row\">\n                        <Button label={'0'} handleClick={this.handleClick}/>\n                        <Button label={'='} handleClick={this.handleClick}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    // method to handle click events from buttons\n    handleClick = (event) => {\n\n        // get the value from the target element (button)\n        const value = event.target.value;\n        //let calculationResult = false;\n\n        switch (value) {\n            case '=': {\n                if (this.state.request !== 0) {\n                    let num = 0;\n\n                    if (this.state.request.includes('/')) {\n                        num = (eval(this.state.request)).toPrecision(14);       // toPrecision - total number of digits displayed on the output screen\n\n                        while (num.substr(num.length - 1, num.length) === '0') {\n                            num = num.substr(0, num.length - 1);\n                        }\n\n                        if (num.substr(num.length - 1, num.length) === '.') {\n                            num = num.substr(0, num.length - 1);\n                        }\n\n                        num = num.replace(/0*$/, \"\");\n                    } else {\n                        num = eval(this.state.request)\n                    }\n\n                    if (num === undefined)\n                        this.setState({request: \"Math Error\"})\n                    else {\n                        this.setState({request: num});\n                        this.setState({calculationResult: true}); // the result of the calculation was output. the next button click should clear the output screen\n                    }\n                }\n                break;\n            }\n            case 'C': {\n                this.setState({request: 0});\n                break;\n            }\n\n            case 'CE': {\n                let str = this.state.request;\n                if(str !== 0) {\n                    str = str.substr(0, str.length - 1);\n                    this.setState({request: str});\n                }\n                break;\n            }\n\n            default: {\n                let str = this.state.request;\n\n\n\n                if(str === 0 && value !== '.') {\n                    this.setState({request: value})\n                }\n                else if (str !== 0 && this.state.calculationResult === true) {\n\n                    this.setState({calculationResult: false});\n\n                    /* if we entered a number, then start counting from the beginning.\n                    if we entered an arithmetic sign, we continue working with the resulting value */\n                    isNaN(value) ? this.setState({request: this.state.request += value}) : this.setState({request: value});\n                }\n\n                //if we type two non numbers in a row (exception minus)\n                else if ((str !== 0) && ((value === '/')  || (value === '*')  || (value === '+'))  &&\n                    ((str.slice(-1) === '/') || (str.slice(-1) ==='*') || (str.slice(-1) ==='-') || (str.slice(-1) ==='+'))) {\n                        str = str.substr(0, str.length - 1);\n                    this.setState({request: str += value})\n                }\n                else {\n                    this.setState({request: this.state.request += value})\n                }\n                break;\n            }\n        }\n    }\n\n}\n\nexport default Calculator;\n","import React from 'react';\n\nconst CalculatorTitle = (props) => {\n  return (\n    <div className=\"calculator-title\">\n      { props.value }\n    </div>\n  )\n}\n\nexport default CalculatorTitle;\n","import React from 'react';\n\n\n// use to show request/answer\nconst OutputScreenRow = (props) => {\n  return (\n    <div className=\"screen-row\">\n      <input type=\"text\" readOnly value = {props.value}/>\n    </div>\n  )\n}\n\nexport default OutputScreenRow;\n","import React from 'react';\nimport OutputScreenRow from './outputScreenRow.js';\n\n// use to hold screen row\nconst OutputScreen = (props) => {\n  return (\n    <div className=\"screen\">\n      <OutputScreenRow value = {props.request}/>\n    </div>\n  )\n}\n\nexport default OutputScreen;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from './components/calculator.js';\nimport './index.css';\n\n// Render the Calculator to the Web page.\nReactDOM.render(<Calculator />, document.getElementById('root'));\n"],"sourceRoot":""}